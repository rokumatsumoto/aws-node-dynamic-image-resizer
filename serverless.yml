service:
  name: ${self:custom.service_name}

plugins:
  - serverless-offline
  - serverless-webpack
  - serverless-dotenv-plugin

provider:
  name: aws
  runtime: nodejs10.x
  region: ${self:custom.region}
  profile: default
  environment:
    DESTINATION_BUCKET: ${self:custom.destination_bucket}
    REGION: ${self:custom.region}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:GetObject
      Resource: "arn:aws:s3:::${self:custom.source_bucket}/*"
    - Effect: Allow
      Action:
        - s3:PutObject
        - s3:PutObjectAcl
      Resource: "arn:aws:s3:::${self:custom.destination_bucket}/*"

custom:
  service_name: serverless-image-resizing
  stage: ${opt:stage, self:custom.defaultStage}
  source_bucket: ${env:SOURCE_BUCKET}
  destination_bucket: ${env:DESTINATION_BUCKET}
  region: ${env:REGION}
  webpack:
    includeModules:
      forceExclude:
        - aws-sdk
  defaultStage: dev
  stages:
    - ${opt:stage}
    - dev
    - integration
    - production
  serverless-offline:
    port: 4000

functions:
  resize:
    handler: src/handlers/resizer/index.handler
    events:
      - s3:
          bucket: ${self:custom.source_bucket}
          event: s3:ObjectCreated:*
          rules:
            - prefix: uploaders/
            - suffix: .png
          existing: true
      - s3:
          bucket: ${self:custom.source_bucket}
          event: s3:ObjectCreated:*
          rules:
            - prefix: uploaders/
            - suffix: .jpg
          existing: true
      - s3:
          bucket: ${self:custom.source_bucket}
          event: s3:ObjectCreated:*
          rules:
            - prefix: uploaders/
            - suffix: .jpeg
          existing: true
      - s3:
          bucket: ${self:custom.source_bucket}
          event: s3:ObjectCreated:*
          rules:
            - prefix: uploaders/
            - suffix: .gif
          existing: true

package:
  exclude:
    - layer/**
    - node_modules/**
    - '!node_modules/babel-runtime/**'
    - '!node_modules/sharp/**'
